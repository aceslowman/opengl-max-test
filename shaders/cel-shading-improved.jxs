<jittershader name="basic-vert">
	<param name="LightPosition" type="vec3" default="1. 1. 1." />
	<param name="DiffuseMaterial" type="vec3" default="1. 0. 0." />
	<param name="AmbientMaterial" type="vec3" default="1. 0.337255 0.337255" />
	<param name="SpecularMaterial" type="vec3" default="0.788235 0.501961 0.501961" />
	<param name="Shininess" type="float" default="0.6" />
	<language name="glsl" version="1.2">
		<bind param="DiffuseMaterial" program="vp" />
		<bind param="LightPosition" program="fp" />
		<bind param="AmbientMaterial" program="fp" />	
		<bind param="SpecularMaterial" program="fp" />
		<bind param="Shininess" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
varying vec3 Normal;
varying vec3 EyespaceNormal;
varying vec3 Diffuse;

uniform vec3 DiffuseMaterial;

void main()
{
	EyespaceNormal = gl_NormalMatrix * gl_Normal;
	gl_Position = ftransform();
	//Diffuse = DiffuseMaterial;
	Diffuse = gl_Color.rgb;
}

]]>		
		</program>
		<program name="fp" type="fragment">
<![CDATA[
//from a method described here: http://prideout.net/blog/?p=22

varying vec3 EyespaceNormal;
varying vec3 Diffuse;

uniform vec3 LightPosition;
uniform vec3 AmbientMaterial;
uniform vec3 SpecularMaterial;
uniform float Shininess;

float stepmix(float edge0, float edge1, float E, float x){
    float T = clamp(0.5 * (x - edge0 + E) / E, 0.0, 1.0);
    return mix(edge0, edge1, T);
}


void main(){
    vec3 N = normalize(EyespaceNormal);
    vec3 L = normalize(LightPosition);
    vec3 Eye = vec3(0, 0, 1);
    vec3 H = normalize(L + Eye);
    
    float df = max(0.0, dot(N, L));
    float sf = max(0.0, dot(N, H));
    sf = pow(sf, Shininess);

    const float A = 0.1;
    const float B = 0.3;
    const float C = 0.6;
    const float D = 1.0;
    float E = fwidth(df);

    if      (df > A - E && df < A + E) df = stepmix(A, B, E, df);
    else if (df > B - E && df < B + E) df = stepmix(B, C, E, df);
    else if (df > C - E && df < C + E) df = stepmix(C, D, E, df);
    else if (df < A) df = 0.0;
    else if (df < B) df = B;
    else if (df < C) df = C;
    else df = D;

    E = fwidth(sf);
    if (sf > 0.5 - E && sf < 0.5 + E)
    {
        sf = smoothstep(0.5 - E, 0.5 + E, sf);
    }
    else
    {
        sf = step(0.5, sf);
    }

    vec3 color = AmbientMaterial + df * Diffuse + sf * SpecularMaterial;
	//vec3 color = AmbientMaterial + df * Diffuse + sf * gl_SecondaryColor.rgb;
    gl_FragColor = vec4(color, 1.0);
}
]]>	
		</program>
	</language>
</jittershader>
