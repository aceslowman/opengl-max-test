<jittershader name="basic-vert">
	<param name="lightDir" type="vec3" default="1. 1. 1." />
	<param name="base_color" type="vec4" default="1. 1. 1. 1." />
	<language name="glsl" version="1.2">
		<bind param="lightDir" program="fp" />
		<bind param="base_color" program= "fp" />
		<program name="vp" type="vertex">
<![CDATA[
varying vec3 normal;

void main()
{
	normal = gl_Normal;
	gl_Position = ftransform();	
}

]]>		
		</program>
		<program name="fp" type="fragment">
<![CDATA[
		

uniform vec4 base_color;
uniform vec3 lightDir;
varying vec3 normal;

vec3 rgb2hsb( in vec3 c ){
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz),
                 vec4(c.gb, K.xy),
                 step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r),
                 vec4(c.r, p.yzx),
                 step(p.x, c.r));
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),
                d / (q.x + e),
                q.x);
}

vec3 hsb2rgb( in vec3 c ){
    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),
                             6.0)-3.0)-1.0,
                     0.0,
                     1.0 );
    rgb = rgb*rgb*(3.0-2.0*rgb);
    return c.z * mix(vec3(1.0), rgb, c.y);
}

//  Function from IÃ±igo Quiles

void main(){
	float intensity;
	vec3 color; 
	vec3 hsb;
	
	intensity = dot(lightDir,normalize(normal));
	hsb = rgb2hsb(base_color);
	
	if (intensity > 0.95){
		color = hsb2rgb(vec3(hsb.x,hsb.y,hsb.z));
		//color = vec4(1.0,0.5,0.5,1.0);
		//color = gl_Color;
	}else if (intensity > 0.5){
		color = hsb2rgb(vec3(hsb.x,hsb.y,hsb.z - 0.2));
		//color = vec4(0.6,0.3,0.3,1.0);
	}else if (intensity > 0.25){
		color = hsb2rgb(vec3(hsb.x,hsb.y,hsb.z - 0.4));
		//color = vec4(0.4,0.2,0.2,1.0);
	}else{
		color = hsb2rgb(vec3(hsb.x,hsb.y,hsb.z - 0.7));
		//color = vec4(0.2,0.1,0.1,1.0);
	}
	
	gl_FragColor = vec4(color.rgb,base_color.a);


}
	
]]>	
		</program>
	</language>
</jittershader>
